// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: idm.proto

package idm

import (
	context "context"
	proto_files "github.com/mihnea1711/POS_Project/services/gateway/idm/proto_files"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDMClient is the client API for IDM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDMClient interface {
	Register(ctx context.Context, in *proto_files.RegisterRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error)
	Login(ctx context.Context, in *proto_files.LoginRequest, opts ...grpc.CallOption) (*proto_files.LoginResponse, error)
	GetUsers(ctx context.Context, in *proto_files.EmptyRequest, opts ...grpc.CallOption) (*proto_files.UsersResponse, error)
	GetUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.UserResponse, error)
	UpdateUserByID(ctx context.Context, in *proto_files.UpdateUserRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
	DeleteUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
	GetUserRole(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.RoleResponse, error)
	UpdateUserRole(ctx context.Context, in *proto_files.UpdateRoleRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
	GetUserPassword(ctx context.Context, in *proto_files.UsernameRequest, opts ...grpc.CallOption) (*proto_files.PasswordResponse, error)
	UpdateUserPassword(ctx context.Context, in *proto_files.UpdatePasswordRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
	AddUserToBlacklist(ctx context.Context, in *proto_files.BlacklistRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error)
	CheckUserInBlacklist(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error)
	RemoveUserFromBlacklist(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
}

type iDMClient struct {
	cc grpc.ClientConnInterface
}

func NewIDMClient(cc grpc.ClientConnInterface) IDMClient {
	return &iDMClient{cc}
}

func (c *iDMClient) Register(ctx context.Context, in *proto_files.RegisterRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error) {
	out := new(proto_files.InfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) Login(ctx context.Context, in *proto_files.LoginRequest, opts ...grpc.CallOption) (*proto_files.LoginResponse, error) {
	out := new(proto_files.LoginResponse)
	err := c.cc.Invoke(ctx, "/IDM/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) GetUsers(ctx context.Context, in *proto_files.EmptyRequest, opts ...grpc.CallOption) (*proto_files.UsersResponse, error) {
	out := new(proto_files.UsersResponse)
	err := c.cc.Invoke(ctx, "/IDM/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) GetUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.UserResponse, error) {
	out := new(proto_files.UserResponse)
	err := c.cc.Invoke(ctx, "/IDM/GetUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) UpdateUserByID(ctx context.Context, in *proto_files.UpdateUserRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/UpdateUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) DeleteUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/DeleteUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) GetUserRole(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.RoleResponse, error) {
	out := new(proto_files.RoleResponse)
	err := c.cc.Invoke(ctx, "/IDM/GetUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) UpdateUserRole(ctx context.Context, in *proto_files.UpdateRoleRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/UpdateUserRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) GetUserPassword(ctx context.Context, in *proto_files.UsernameRequest, opts ...grpc.CallOption) (*proto_files.PasswordResponse, error) {
	out := new(proto_files.PasswordResponse)
	err := c.cc.Invoke(ctx, "/IDM/GetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) UpdateUserPassword(ctx context.Context, in *proto_files.UpdatePasswordRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) AddUserToBlacklist(ctx context.Context, in *proto_files.BlacklistRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error) {
	out := new(proto_files.InfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/AddUserToBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) CheckUserInBlacklist(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.InfoResponse, error) {
	out := new(proto_files.InfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/CheckUserInBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) RemoveUserFromBlacklist(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/RemoveUserFromBlacklist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDMServer is the server API for IDM service.
// All implementations must embed UnimplementedIDMServer
// for forward compatibility
type IDMServer interface {
	Register(context.Context, *proto_files.RegisterRequest) (*proto_files.InfoResponse, error)
	Login(context.Context, *proto_files.LoginRequest) (*proto_files.LoginResponse, error)
	GetUsers(context.Context, *proto_files.EmptyRequest) (*proto_files.UsersResponse, error)
	GetUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.UserResponse, error)
	UpdateUserByID(context.Context, *proto_files.UpdateUserRequest) (*proto_files.EnhancedInfoResponse, error)
	DeleteUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error)
	GetUserRole(context.Context, *proto_files.UserIDRequest) (*proto_files.RoleResponse, error)
	UpdateUserRole(context.Context, *proto_files.UpdateRoleRequest) (*proto_files.EnhancedInfoResponse, error)
	GetUserPassword(context.Context, *proto_files.UsernameRequest) (*proto_files.PasswordResponse, error)
	UpdateUserPassword(context.Context, *proto_files.UpdatePasswordRequest) (*proto_files.EnhancedInfoResponse, error)
	AddUserToBlacklist(context.Context, *proto_files.BlacklistRequest) (*proto_files.InfoResponse, error)
	CheckUserInBlacklist(context.Context, *proto_files.UserIDRequest) (*proto_files.InfoResponse, error)
	RemoveUserFromBlacklist(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error)
	mustEmbedUnimplementedIDMServer()
}

// UnimplementedIDMServer must be embedded to have forward compatible implementations.
type UnimplementedIDMServer struct {
}

func (UnimplementedIDMServer) Register(context.Context, *proto_files.RegisterRequest) (*proto_files.InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedIDMServer) Login(context.Context, *proto_files.LoginRequest) (*proto_files.LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedIDMServer) GetUsers(context.Context, *proto_files.EmptyRequest) (*proto_files.UsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedIDMServer) GetUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByID not implemented")
}
func (UnimplementedIDMServer) UpdateUserByID(context.Context, *proto_files.UpdateUserRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserByID not implemented")
}
func (UnimplementedIDMServer) DeleteUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByID not implemented")
}
func (UnimplementedIDMServer) GetUserRole(context.Context, *proto_files.UserIDRequest) (*proto_files.RoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRole not implemented")
}
func (UnimplementedIDMServer) UpdateUserRole(context.Context, *proto_files.UpdateRoleRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserRole not implemented")
}
func (UnimplementedIDMServer) GetUserPassword(context.Context, *proto_files.UsernameRequest) (*proto_files.PasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPassword not implemented")
}
func (UnimplementedIDMServer) UpdateUserPassword(context.Context, *proto_files.UpdatePasswordRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedIDMServer) AddUserToBlacklist(context.Context, *proto_files.BlacklistRequest) (*proto_files.InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToBlacklist not implemented")
}
func (UnimplementedIDMServer) CheckUserInBlacklist(context.Context, *proto_files.UserIDRequest) (*proto_files.InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserInBlacklist not implemented")
}
func (UnimplementedIDMServer) RemoveUserFromBlacklist(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUserFromBlacklist not implemented")
}
func (UnimplementedIDMServer) mustEmbedUnimplementedIDMServer() {}

// UnsafeIDMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDMServer will
// result in compilation errors.
type UnsafeIDMServer interface {
	mustEmbedUnimplementedIDMServer()
}

func RegisterIDMServer(s grpc.ServiceRegistrar, srv IDMServer) {
	s.RegisterService(&IDM_ServiceDesc, srv)
}

func _IDM_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).Register(ctx, req.(*proto_files.RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).Login(ctx, req.(*proto_files.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).GetUsers(ctx, req.(*proto_files.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_GetUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).GetUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/GetUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).GetUserByID(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_UpdateUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).UpdateUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/UpdateUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).UpdateUserByID(ctx, req.(*proto_files.UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/DeleteUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).DeleteUserByID(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_GetUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).GetUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/GetUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).GetUserRole(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_UpdateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).UpdateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/UpdateUserRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).UpdateUserRole(ctx, req.(*proto_files.UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_GetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).GetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/GetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).GetUserPassword(ctx, req.(*proto_files.UsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).UpdateUserPassword(ctx, req.(*proto_files.UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_AddUserToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.BlacklistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).AddUserToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/AddUserToBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).AddUserToBlacklist(ctx, req.(*proto_files.BlacklistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_CheckUserInBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).CheckUserInBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/CheckUserInBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).CheckUserInBlacklist(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_RemoveUserFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).RemoveUserFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/RemoveUserFromBlacklist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).RemoveUserFromBlacklist(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IDM_ServiceDesc is the grpc.ServiceDesc for IDM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IDM",
	HandlerType: (*IDMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _IDM_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _IDM_Login_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _IDM_GetUsers_Handler,
		},
		{
			MethodName: "GetUserByID",
			Handler:    _IDM_GetUserByID_Handler,
		},
		{
			MethodName: "UpdateUserByID",
			Handler:    _IDM_UpdateUserByID_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _IDM_DeleteUserByID_Handler,
		},
		{
			MethodName: "GetUserRole",
			Handler:    _IDM_GetUserRole_Handler,
		},
		{
			MethodName: "UpdateUserRole",
			Handler:    _IDM_UpdateUserRole_Handler,
		},
		{
			MethodName: "GetUserPassword",
			Handler:    _IDM_GetUserPassword_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _IDM_UpdateUserPassword_Handler,
		},
		{
			MethodName: "AddUserToBlacklist",
			Handler:    _IDM_AddUserToBlacklist_Handler,
		},
		{
			MethodName: "CheckUserInBlacklist",
			Handler:    _IDM_CheckUserInBlacklist_Handler,
		},
		{
			MethodName: "RemoveUserFromBlacklist",
			Handler:    _IDM_RemoveUserFromBlacklist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idm.proto",
}
