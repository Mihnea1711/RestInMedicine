// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: idm.proto

package idm

import (
	context "context"
	proto_files "github.com/mihnea1711/POS_Project/services/rabbit/idm/proto_files"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IDMClient is the client API for IDM service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IDMClient interface {
	HealthCheck(ctx context.Context, in *proto_files.HealthCheckRequest, opts ...grpc.CallOption) (*proto_files.HealthCheckResponse, error)
	DeleteUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error)
}

type iDMClient struct {
	cc grpc.ClientConnInterface
}

func NewIDMClient(cc grpc.ClientConnInterface) IDMClient {
	return &iDMClient{cc}
}

func (c *iDMClient) HealthCheck(ctx context.Context, in *proto_files.HealthCheckRequest, opts ...grpc.CallOption) (*proto_files.HealthCheckResponse, error) {
	out := new(proto_files.HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/IDM/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iDMClient) DeleteUserByID(ctx context.Context, in *proto_files.UserIDRequest, opts ...grpc.CallOption) (*proto_files.EnhancedInfoResponse, error) {
	out := new(proto_files.EnhancedInfoResponse)
	err := c.cc.Invoke(ctx, "/IDM/DeleteUserByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IDMServer is the server API for IDM service.
// All implementations must embed UnimplementedIDMServer
// for forward compatibility
type IDMServer interface {
	HealthCheck(context.Context, *proto_files.HealthCheckRequest) (*proto_files.HealthCheckResponse, error)
	DeleteUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error)
	mustEmbedUnimplementedIDMServer()
}

// UnimplementedIDMServer must be embedded to have forward compatible implementations.
type UnimplementedIDMServer struct {
}

func (UnimplementedIDMServer) HealthCheck(context.Context, *proto_files.HealthCheckRequest) (*proto_files.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedIDMServer) DeleteUserByID(context.Context, *proto_files.UserIDRequest) (*proto_files.EnhancedInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserByID not implemented")
}
func (UnimplementedIDMServer) mustEmbedUnimplementedIDMServer() {}

// UnsafeIDMServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IDMServer will
// result in compilation errors.
type UnsafeIDMServer interface {
	mustEmbedUnimplementedIDMServer()
}

func RegisterIDMServer(s grpc.ServiceRegistrar, srv IDMServer) {
	s.RegisterService(&IDM_ServiceDesc, srv)
}

func _IDM_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).HealthCheck(ctx, req.(*proto_files.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IDM_DeleteUserByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto_files.UserIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IDMServer).DeleteUserByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IDM/DeleteUserByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IDMServer).DeleteUserByID(ctx, req.(*proto_files.UserIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IDM_ServiceDesc is the grpc.ServiceDesc for IDM service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IDM_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IDM",
	HandlerType: (*IDMServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _IDM_HealthCheck_Handler,
		},
		{
			MethodName: "DeleteUserByID",
			Handler:    _IDM_DeleteUserByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idm.proto",
}
